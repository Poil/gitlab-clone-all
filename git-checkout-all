#!/usr/bin/python3

import argparse

from gitlab_clone_all_utils import RepoProcessor


class Worker(RepoProcessor):
    def _process(self, repo, path):
        check_dirty = False
        try:
            local_head = repo.heads[self._args.branch]
            check_dirty = local_head.commit != repo.head.commit
        except IndexError:
            local_head = None
        if not local_head:
            remote = repo.remote(self._args.remote)
            if remote.exists():
                remote_head = {ref.remote_head: ref for ref in remote.refs}.get(self._args.branch)
                if remote_head:
                    local_head = repo.create_head(self._args.branch, commit=remote_head.commit)
                    local_head.set_tracking_branch(remote_head)
                    check_dirty = local_head.commit != repo.head.commit
                else:
                    if not self._args.quite and not self._args.create:
                        print('Remote "{}" does not have "{}" branch in {}'
                              .format(self._args.remote, self._args.branch, path))
            else:
                if not self._args.quite and not self._args.create:
                    print('Remote "{}" does not exist in {}'.format(self._args.remote, path))
        if check_dirty and repo.is_dirty():
            print('{} is dirty'.format(path))
            return
        if not local_head and self._args.create:
            local_head = repo.create_head(self._args.branch)
            print('Created {} branch in {}'.format(local_head.name, path))
            return
        if local_head:
            local_head.checkout()
            print('{} branch was checked out in {}'.format(local_head.name, path))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Checkout a particular branch '
                                                 'in all the repos if it exists')
    parser.add_argument('-q', '--quite', action='store_true',
                        help='Do not output warnings about missing remotes and branches')
    parser.add_argument('-c', '--create', action='store_true',
                        help='Create new local branch at current commit even if there is no '
                             'corresponding remote branch')
    parser.add_argument('branch',
                        help='Local branch name. If local repo does not have this branch, '
                             'but the remote does, it is checked out instead as a new local branch')
    parser.add_argument('remote', nargs='?', default='origin',
                        help='Remote to check for the branch')
    Worker.execute(parser)
